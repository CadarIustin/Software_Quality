name: Java CI with Maven

on:
  push:
    branches: [ testing ]
  pull_request:
    branches: [ testing ]

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Configure Maven for cross-platform support
      run: |
        echo "MAVEN_OPTS=-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$GITHUB_WORKSPACE/.m2/repository" >> $GITHUB_ENV
        mkdir -p $GITHUB_WORKSPACE/.m2/repository
    - name: Build with Maven
      run: mvn -B package -Dmaven.test.skip=true
    - name: Run tests
      id: run_tests
      run: mvn test
      continue-on-error: true
    - name: Check test status
      id: check_tests
      run: |
        if [ "${{ steps.run_tests.outcome }}" == "success" ]; then
          echo "All tests passed!"
          echo "tests_passed=true" >> $GITHUB_OUTPUT
        else
          echo "Tests failed!"
          echo "tests_passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    - name: Generate JaCoCo report
      if: steps.check_tests.outputs.tests_passed == 'true'
      run: mvn jacoco:report
    - name: Upload report
      if: steps.check_tests.outputs.tests_passed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-report
        path: target/site/jacoco/

  promote-to-acceptance:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ success() && github.event_name == 'push' }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for proper merging
    
    - name: Configure Git
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Fetch all branches
      run: |
        git fetch --all --prune
    
    - name: Check if acceptance branch exists
      id: check_branch
      run: |
        if git show-ref --verify --quiet refs/remotes/origin/acceptance; then
          echo "acceptance_exists=true" >> $GITHUB_OUTPUT
        else
          echo "acceptance_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create acceptance branch if it doesn't exist
      if: steps.check_branch.outputs.acceptance_exists == 'false'
      run: |
        # Create acceptance branch from testing
        echo "Creating acceptance branch from testing branch"
        git checkout -b acceptance
        git push -u origin acceptance
    
    - name: Merge testing into acceptance
      run: |
        # Get current commit hash of testing branch
        TESTING_HASH=$(git rev-parse origin/testing)
        echo "Current testing branch commit: $TESTING_HASH"
        
        # Checkout acceptance branch
        git checkout acceptance || git checkout -b acceptance origin/acceptance
        
        # Update local acceptance branch
        git pull origin acceptance
        
        # Check if testing is already merged into acceptance
        if git merge-base --is-ancestor $TESTING_HASH HEAD; then
          echo "Testing branch is already up-to-date with acceptance. No merge needed."
          exit 0
        fi
        
        # Perform the merge with proper history preservation
        echo "Merging testing branch into acceptance"
        git merge --no-ff origin/testing -m "Auto-merge testing to acceptance after successful tests [skip ci]"
        
        # Push changes to acceptance branch
        git push origin acceptance
        
        echo "Successfully merged testing branch into acceptance branch"
    
    - name: Generate merge report
      if: success()
      run: |
        echo "### Merge Results" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Successfully merged testing branch into acceptance branch" >> $GITHUB_STEP_SUMMARY
        echo "All tests passed and changes have been promoted" >> $GITHUB_STEP_SUMMARY
